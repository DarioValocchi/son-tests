#!groovy
node {

    def err = null
    currentBuild.result = "SUCCESS"

    try {
       stage 'Checkout'
            checkout scm
                        sh 'chmod +x int-slm-repositories/*.sh'
                        sh 'chmod +x int-slm-repositories/scripts/*.sh'

       stage 'Deploy'
            echo 'Push to int-server'
                        sh 'int-slm-repositories/deployment.sh'

       stage 'Testing'
            echo 'Testing Phase'
            sh 'int-slm-repositories/tests.sh'
            
            echo 'Testing Phase: scripts'
            sh 'int-slm-repositories/scripts/postNSR2NSRepo.sh'
            sh 'int-slm-repositories/scripts/postVNFR2NFRepo.sh'
            // sh 'int-slm-repositories/scripts/postNSRVNFR2MonRepo.sh'

            stage 'Showing report'
                        echo 'Showing report'
                        publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'reports', reportFiles: 'htmlReport.html', reportName: 'HTML Report'])

       stage 'Notifications'
            echo 'Sending mails'

            mail body: 'project build successful',
                        from: 'sonata-nfv@gmail.com',
                        replyTo: 'sonata-nfv@gmail.com',
                        subject: 'project build successful',
                        to: 'shuaib.siddiqui@i2cat.net, , dani.guija@i2cat.net'
        }


    catch (caughtError) {
        err = caughtError
        currentBuild.result = "FAILURE"
            mail body: "project build error: ${err}" ,
            from: 'sonata-nfv@gmail.com',
            replyTo: 'sonata-nfv@gmail.com',
            subject: 'project build error',
            to: 'shuaib.siddiqui@i2cat.net, dani.guija@i2cat.net'
        }

    finally {
        /* Must re-throw exception to propagate error */
        if (err) {
            throw err
        }

    }

}
