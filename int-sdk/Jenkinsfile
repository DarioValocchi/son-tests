#!groovy
node {

    def err = null
    currentBuild.result = "SUCCESS"

    try {
       stage 'Checkout'
            checkout scm

       stage 'Deploy Containers'
            echo 'Fetch and Start Service Containers'
	        sh 'int-sdk/deployment.sh'

	   stage 'Clean Environment'
	        sh "printheader 'Clean dir structure, clean catalogue and prepare environment'"
            sh "docker exec son-cli-int-test /bin/bash -c 'cd /tests; ./clean-environment.sh'"

       stage 'Test 1.1: Create Workspace'
            sh "printheader 'Testing: Create workspace'"
            sh "docker exec son-cli-int-test /bin/bash -c 'cd /tests; scripts/1_create_son_workspace.sh workspaces/ws1'"

       stage 'Test 1.2: Create Standalone Project'
            sh "printheader 'Testing: Create sample project'"
            sh "docker exec son-cli-int-test /bin/bash -c 'cd /tests; son-workspace --workspace workspaces/ws1 --project projects/prj_sample'"
            sh "printheader 'Testing: Create standalone project from template'"
            sh "docker exec son-cli-int-test /bin/bash -c 'cd /tests; scripts/2_create_standalone-project.sh workspaces/ws1 projects/prj1 resources/project-Y1-emu.zip'"

       stage 'Test 1.5: Package Projects'
            sh "printheader 'Testing: Package standalone project'"
            sh "docker exec son-cli-int-test /bin/bash -c 'cd /tests; son-package --workspace workspaces/ws1 --project projects/prj1 -d packages/package.1.standalone -n sonata-demo-docker'"

       stage 'Test 1.6: Push Projects to SP'
            sh "printheader 'Testing: Push package (project standalone) to SP'"
            sh "docker exec son-cli-int-test /bin/bash -c 'cd /tests; son-access -w workspaces/ws1 push --upload packages/package.1.standalone/sonata-demo-docker.son'"

       stage 'Clean Environment'
            sh "printheader 'Clean dir structure, clean catalogue and prepare environment'"
	        sh "docker exec son-cli-int-test /bin/bash -c 'cd /tests; ./clean-environment.sh'"

       stage 'Notifications'
            echo 'Sending mails'

            mail body: 'int-sdk-pipeline integration tests were successful',
                        from: 'sonata-nfv@gmail.com',
                        replyTo: 'sonata-nfv@gmail.com',
                        subject: 'int-sdk-pipeline: build successful',
                        to: 'lconceicao@ubiwhere.com'
        }

    catch (caughtError) {
        err = caughtError
        currentBuild.result = "FAILURE"
            mail body: "int-sdk-pipeline build error: ${err}" ,
            from: 'sonata-nfv@gmail.com',
            replyTo: 'sonata-nfv@gmail.com',
            subject: 'int-sdk-pipeline: build error',
            to: 'lconceicao@ubiwhere.com, tbatista@ubiwhere.com'
        }

    finally {
        /* Must re-throw exception to propagate error */
        if (err) {
            throw err
        }

    }
}